// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"strings"
)

// CompanyRequestBuilder is request builder for Company
type CompanyRequestBuilder struct{ BaseRequestBuilder }

// Request returns CompanyRequest
func (b *CompanyRequestBuilder) Request() *CompanyRequest {
	return &CompanyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// CompanyRequest is request for Company
type CompanyRequest struct{ BaseRequest }

// Get performs GET request for Company
func (r *CompanyRequest) Get(ctx context.Context) (resObj *Company, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Company
func (r *CompanyRequest) Update(ctx context.Context, reqObj *Company) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Company
func (r *CompanyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for Company
func (r *CompanyRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj Company
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for Company
func (r *CompanyRequest) BatchUpdate(batch *BatchRequest, reqObj *Company) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for Company
func (r *CompanyRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// CompanyInformationRequestBuilder is request builder for CompanyInformation
type CompanyInformationRequestBuilder struct{ BaseRequestBuilder }

// Request returns CompanyInformationRequest
func (b *CompanyInformationRequestBuilder) Request() *CompanyInformationRequest {
	return &CompanyInformationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// CompanyInformationRequest is request for CompanyInformation
type CompanyInformationRequest struct{ BaseRequest }

// Get performs GET request for CompanyInformation
func (r *CompanyInformationRequest) Get(ctx context.Context) (resObj *CompanyInformation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for CompanyInformation
func (r *CompanyInformationRequest) Update(ctx context.Context, reqObj *CompanyInformation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for CompanyInformation
func (r *CompanyInformationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for CompanyInformation
func (r *CompanyInformationRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj CompanyInformation
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for CompanyInformation
func (r *CompanyInformationRequest) BatchUpdate(batch *BatchRequest, reqObj *CompanyInformation) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for CompanyInformation
func (r *CompanyInformationRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}
