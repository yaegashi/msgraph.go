// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"strings"
)

// NotebookRequestBuilder is request builder for Notebook
type NotebookRequestBuilder struct{ BaseRequestBuilder }

// Request returns NotebookRequest
func (b *NotebookRequestBuilder) Request() *NotebookRequest {
	return &NotebookRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// NotebookRequest is request for Notebook
type NotebookRequest struct{ BaseRequest }

// Get performs GET request for Notebook
func (r *NotebookRequest) Get(ctx context.Context) (resObj *Notebook, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Notebook
func (r *NotebookRequest) Update(ctx context.Context, reqObj *Notebook) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Notebook
func (r *NotebookRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for Notebook
func (r *NotebookRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj Notebook
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for Notebook
func (r *NotebookRequest) BatchUpdate(batch *BatchRequest, reqObj *Notebook) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for Notebook
func (r *NotebookRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

//
type NotebookCollectionGetNotebookFromWebURLRequestBuilder struct{ BaseRequestBuilder }

// GetNotebookFromWebURL action undocumented
func (b *OnenoteNotebooksCollectionRequestBuilder) GetNotebookFromWebURL(reqObj *NotebookCollectionGetNotebookFromWebURLRequestParameter) *NotebookCollectionGetNotebookFromWebURLRequestBuilder {
	bb := &NotebookCollectionGetNotebookFromWebURLRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/getNotebookFromWebUrl"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type NotebookCollectionGetNotebookFromWebURLRequest struct{ BaseRequest }

//
func (b *NotebookCollectionGetNotebookFromWebURLRequestBuilder) Request() *NotebookCollectionGetNotebookFromWebURLRequest {
	return &NotebookCollectionGetNotebookFromWebURLRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *NotebookCollectionGetNotebookFromWebURLRequest) Post(ctx context.Context) (resObj *CopyNotebookModel, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

//
func (r *NotebookCollectionGetNotebookFromWebURLRequest) BatchPost(batch *BatchRequest) error {
	var resObj *CopyNotebookModel
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, resObj)
}

//
type NotebookCopyNotebookRequestBuilder struct{ BaseRequestBuilder }

// CopyNotebook action undocumented
func (b *NotebookRequestBuilder) CopyNotebook(reqObj *NotebookCopyNotebookRequestParameter) *NotebookCopyNotebookRequestBuilder {
	bb := &NotebookCopyNotebookRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/copyNotebook"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type NotebookCopyNotebookRequest struct{ BaseRequest }

//
func (b *NotebookCopyNotebookRequestBuilder) Request() *NotebookCopyNotebookRequest {
	return &NotebookCopyNotebookRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *NotebookCopyNotebookRequest) Post(ctx context.Context) (resObj *OnenoteOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

//
func (r *NotebookCopyNotebookRequest) BatchPost(batch *BatchRequest) error {
	var resObj *OnenoteOperation
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, resObj)
}
