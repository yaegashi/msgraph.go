// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"strings"
)

// SchemaRequestBuilder is request builder for Schema
type SchemaRequestBuilder struct{ BaseRequestBuilder }

// Request returns SchemaRequest
func (b *SchemaRequestBuilder) Request() *SchemaRequest {
	return &SchemaRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SchemaRequest is request for Schema
type SchemaRequest struct{ BaseRequest }

// Get performs GET request for Schema
func (r *SchemaRequest) Get(ctx context.Context) (resObj *Schema, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Schema
func (r *SchemaRequest) Update(ctx context.Context, reqObj *Schema) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Schema
func (r *SchemaRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for Schema
func (r *SchemaRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj Schema
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for Schema
func (r *SchemaRequest) BatchUpdate(batch *BatchRequest, reqObj *Schema) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for Schema
func (r *SchemaRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// SchemaExtensionRequestBuilder is request builder for SchemaExtension
type SchemaExtensionRequestBuilder struct{ BaseRequestBuilder }

// Request returns SchemaExtensionRequest
func (b *SchemaExtensionRequestBuilder) Request() *SchemaExtensionRequest {
	return &SchemaExtensionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SchemaExtensionRequest is request for SchemaExtension
type SchemaExtensionRequest struct{ BaseRequest }

// Get performs GET request for SchemaExtension
func (r *SchemaExtensionRequest) Get(ctx context.Context) (resObj *SchemaExtension, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for SchemaExtension
func (r *SchemaExtensionRequest) Update(ctx context.Context, reqObj *SchemaExtension) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for SchemaExtension
func (r *SchemaExtensionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for SchemaExtension
func (r *SchemaExtensionRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj SchemaExtension
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for SchemaExtension
func (r *SchemaExtensionRequest) BatchUpdate(batch *BatchRequest, reqObj *SchemaExtension) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for SchemaExtension
func (r *SchemaExtensionRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}
