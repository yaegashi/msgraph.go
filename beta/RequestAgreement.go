// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"strings"
)

// AgreementRequestBuilder is request builder for Agreement
type AgreementRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementRequest
func (b *AgreementRequestBuilder) Request() *AgreementRequest {
	return &AgreementRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementRequest is request for Agreement
type AgreementRequest struct{ BaseRequest }

// Get performs GET request for Agreement
func (r *AgreementRequest) Get(ctx context.Context) (resObj *Agreement, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Agreement
func (r *AgreementRequest) Update(ctx context.Context, reqObj *Agreement) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Agreement
func (r *AgreementRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for Agreement
func (r *AgreementRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj Agreement
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for Agreement
func (r *AgreementRequest) BatchUpdate(batch *BatchRequest, reqObj *Agreement) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for Agreement
func (r *AgreementRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// AgreementAcceptanceRequestBuilder is request builder for AgreementAcceptance
type AgreementAcceptanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementAcceptanceRequest
func (b *AgreementAcceptanceRequestBuilder) Request() *AgreementAcceptanceRequest {
	return &AgreementAcceptanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementAcceptanceRequest is request for AgreementAcceptance
type AgreementAcceptanceRequest struct{ BaseRequest }

// Get performs GET request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Get(ctx context.Context) (resObj *AgreementAcceptance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Update(ctx context.Context, reqObj *AgreementAcceptance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for AgreementAcceptance
func (r *AgreementAcceptanceRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj AgreementAcceptance
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for AgreementAcceptance
func (r *AgreementAcceptanceRequest) BatchUpdate(batch *BatchRequest, reqObj *AgreementAcceptance) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for AgreementAcceptance
func (r *AgreementAcceptanceRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// AgreementFileRequestBuilder is request builder for AgreementFile
type AgreementFileRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementFileRequest
func (b *AgreementFileRequestBuilder) Request() *AgreementFileRequest {
	return &AgreementFileRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementFileRequest is request for AgreementFile
type AgreementFileRequest struct{ BaseRequest }

// Get performs GET request for AgreementFile
func (r *AgreementFileRequest) Get(ctx context.Context) (resObj *AgreementFile, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementFile
func (r *AgreementFileRequest) Update(ctx context.Context, reqObj *AgreementFile) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementFile
func (r *AgreementFileRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for AgreementFile
func (r *AgreementFileRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj AgreementFile
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for AgreementFile
func (r *AgreementFileRequest) BatchUpdate(batch *BatchRequest, reqObj *AgreementFile) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for AgreementFile
func (r *AgreementFileRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}
