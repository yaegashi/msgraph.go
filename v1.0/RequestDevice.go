// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// DeviceRequestBuilder is request builder for Device
type DeviceRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceRequest
func (b *DeviceRequestBuilder) Request() *DeviceRequest {
	return &DeviceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceRequest is request for Device
type DeviceRequest struct{ BaseRequest }

// Get performs GET request for Device
func (r *DeviceRequest) Get(ctx context.Context) (resObj *Device, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Device
func (r *DeviceRequest) Update(ctx context.Context, reqObj *Device) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Device
func (r *DeviceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for Device
func (r *DeviceRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj Device
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for Device
func (r *DeviceRequest) BatchUpdate(batch *BatchRequest, reqObj *Device) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for Device
func (r *DeviceRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceAndAppManagementRoleAssignmentRequestBuilder is request builder for DeviceAndAppManagementRoleAssignment
type DeviceAndAppManagementRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceAndAppManagementRoleAssignmentRequest
func (b *DeviceAndAppManagementRoleAssignmentRequestBuilder) Request() *DeviceAndAppManagementRoleAssignmentRequest {
	return &DeviceAndAppManagementRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceAndAppManagementRoleAssignmentRequest is request for DeviceAndAppManagementRoleAssignment
type DeviceAndAppManagementRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for DeviceAndAppManagementRoleAssignment
func (r *DeviceAndAppManagementRoleAssignmentRequest) Get(ctx context.Context) (resObj *DeviceAndAppManagementRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceAndAppManagementRoleAssignment
func (r *DeviceAndAppManagementRoleAssignmentRequest) Update(ctx context.Context, reqObj *DeviceAndAppManagementRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceAndAppManagementRoleAssignment
func (r *DeviceAndAppManagementRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceAndAppManagementRoleAssignment
func (r *DeviceAndAppManagementRoleAssignmentRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceAndAppManagementRoleAssignment
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceAndAppManagementRoleAssignment
func (r *DeviceAndAppManagementRoleAssignmentRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceAndAppManagementRoleAssignment) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceAndAppManagementRoleAssignment
func (r *DeviceAndAppManagementRoleAssignmentRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceAppManagementRequestBuilder is request builder for DeviceAppManagement
type DeviceAppManagementRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceAppManagementRequest
func (b *DeviceAppManagementRequestBuilder) Request() *DeviceAppManagementRequest {
	return &DeviceAppManagementRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceAppManagementRequest is request for DeviceAppManagement
type DeviceAppManagementRequest struct{ BaseRequest }

// Get performs GET request for DeviceAppManagement
func (r *DeviceAppManagementRequest) Get(ctx context.Context) (resObj *DeviceAppManagement, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceAppManagement
func (r *DeviceAppManagementRequest) Update(ctx context.Context, reqObj *DeviceAppManagement) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceAppManagement
func (r *DeviceAppManagementRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceAppManagement
func (r *DeviceAppManagementRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceAppManagement
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceAppManagement
func (r *DeviceAppManagementRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceAppManagement) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceAppManagement
func (r *DeviceAppManagementRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceCategoryRequestBuilder is request builder for DeviceCategory
type DeviceCategoryRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceCategoryRequest
func (b *DeviceCategoryRequestBuilder) Request() *DeviceCategoryRequest {
	return &DeviceCategoryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceCategoryRequest is request for DeviceCategory
type DeviceCategoryRequest struct{ BaseRequest }

// Get performs GET request for DeviceCategory
func (r *DeviceCategoryRequest) Get(ctx context.Context) (resObj *DeviceCategory, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceCategory
func (r *DeviceCategoryRequest) Update(ctx context.Context, reqObj *DeviceCategory) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceCategory
func (r *DeviceCategoryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceCategory
func (r *DeviceCategoryRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceCategory
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceCategory
func (r *DeviceCategoryRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceCategory) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceCategory
func (r *DeviceCategoryRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceActionItemRequestBuilder is request builder for DeviceComplianceActionItem
type DeviceComplianceActionItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceActionItemRequest
func (b *DeviceComplianceActionItemRequestBuilder) Request() *DeviceComplianceActionItemRequest {
	return &DeviceComplianceActionItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceActionItemRequest is request for DeviceComplianceActionItem
type DeviceComplianceActionItemRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceActionItem
func (r *DeviceComplianceActionItemRequest) Get(ctx context.Context) (resObj *DeviceComplianceActionItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceActionItem
func (r *DeviceComplianceActionItemRequest) Update(ctx context.Context, reqObj *DeviceComplianceActionItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceActionItem
func (r *DeviceComplianceActionItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceActionItem
func (r *DeviceComplianceActionItemRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceActionItem
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceActionItem
func (r *DeviceComplianceActionItemRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceActionItem) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceActionItem
func (r *DeviceComplianceActionItemRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceDeviceOverviewRequestBuilder is request builder for DeviceComplianceDeviceOverview
type DeviceComplianceDeviceOverviewRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceDeviceOverviewRequest
func (b *DeviceComplianceDeviceOverviewRequestBuilder) Request() *DeviceComplianceDeviceOverviewRequest {
	return &DeviceComplianceDeviceOverviewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceDeviceOverviewRequest is request for DeviceComplianceDeviceOverview
type DeviceComplianceDeviceOverviewRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceDeviceOverview
func (r *DeviceComplianceDeviceOverviewRequest) Get(ctx context.Context) (resObj *DeviceComplianceDeviceOverview, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceDeviceOverview
func (r *DeviceComplianceDeviceOverviewRequest) Update(ctx context.Context, reqObj *DeviceComplianceDeviceOverview) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceDeviceOverview
func (r *DeviceComplianceDeviceOverviewRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceDeviceOverview
func (r *DeviceComplianceDeviceOverviewRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceDeviceOverview
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceDeviceOverview
func (r *DeviceComplianceDeviceOverviewRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceDeviceOverview) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceDeviceOverview
func (r *DeviceComplianceDeviceOverviewRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceDeviceStatusRequestBuilder is request builder for DeviceComplianceDeviceStatus
type DeviceComplianceDeviceStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceDeviceStatusRequest
func (b *DeviceComplianceDeviceStatusRequestBuilder) Request() *DeviceComplianceDeviceStatusRequest {
	return &DeviceComplianceDeviceStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceDeviceStatusRequest is request for DeviceComplianceDeviceStatus
type DeviceComplianceDeviceStatusRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceDeviceStatus
func (r *DeviceComplianceDeviceStatusRequest) Get(ctx context.Context) (resObj *DeviceComplianceDeviceStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceDeviceStatus
func (r *DeviceComplianceDeviceStatusRequest) Update(ctx context.Context, reqObj *DeviceComplianceDeviceStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceDeviceStatus
func (r *DeviceComplianceDeviceStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceDeviceStatus
func (r *DeviceComplianceDeviceStatusRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceDeviceStatus
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceDeviceStatus
func (r *DeviceComplianceDeviceStatusRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceDeviceStatus) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceDeviceStatus
func (r *DeviceComplianceDeviceStatusRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceCompliancePolicyRequestBuilder is request builder for DeviceCompliancePolicy
type DeviceCompliancePolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceCompliancePolicyRequest
func (b *DeviceCompliancePolicyRequestBuilder) Request() *DeviceCompliancePolicyRequest {
	return &DeviceCompliancePolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceCompliancePolicyRequest is request for DeviceCompliancePolicy
type DeviceCompliancePolicyRequest struct{ BaseRequest }

// Get performs GET request for DeviceCompliancePolicy
func (r *DeviceCompliancePolicyRequest) Get(ctx context.Context) (resObj *DeviceCompliancePolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceCompliancePolicy
func (r *DeviceCompliancePolicyRequest) Update(ctx context.Context, reqObj *DeviceCompliancePolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceCompliancePolicy
func (r *DeviceCompliancePolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceCompliancePolicy
func (r *DeviceCompliancePolicyRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceCompliancePolicy
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceCompliancePolicy
func (r *DeviceCompliancePolicyRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceCompliancePolicy) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceCompliancePolicy
func (r *DeviceCompliancePolicyRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceCompliancePolicyAssignmentRequestBuilder is request builder for DeviceCompliancePolicyAssignment
type DeviceCompliancePolicyAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceCompliancePolicyAssignmentRequest
func (b *DeviceCompliancePolicyAssignmentRequestBuilder) Request() *DeviceCompliancePolicyAssignmentRequest {
	return &DeviceCompliancePolicyAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceCompliancePolicyAssignmentRequest is request for DeviceCompliancePolicyAssignment
type DeviceCompliancePolicyAssignmentRequest struct{ BaseRequest }

// Get performs GET request for DeviceCompliancePolicyAssignment
func (r *DeviceCompliancePolicyAssignmentRequest) Get(ctx context.Context) (resObj *DeviceCompliancePolicyAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceCompliancePolicyAssignment
func (r *DeviceCompliancePolicyAssignmentRequest) Update(ctx context.Context, reqObj *DeviceCompliancePolicyAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceCompliancePolicyAssignment
func (r *DeviceCompliancePolicyAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceCompliancePolicyAssignment
func (r *DeviceCompliancePolicyAssignmentRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceCompliancePolicyAssignment
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceCompliancePolicyAssignment
func (r *DeviceCompliancePolicyAssignmentRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceCompliancePolicyAssignment) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceCompliancePolicyAssignment
func (r *DeviceCompliancePolicyAssignmentRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceCompliancePolicyDeviceStateSummaryRequestBuilder is request builder for DeviceCompliancePolicyDeviceStateSummary
type DeviceCompliancePolicyDeviceStateSummaryRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceCompliancePolicyDeviceStateSummaryRequest
func (b *DeviceCompliancePolicyDeviceStateSummaryRequestBuilder) Request() *DeviceCompliancePolicyDeviceStateSummaryRequest {
	return &DeviceCompliancePolicyDeviceStateSummaryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceCompliancePolicyDeviceStateSummaryRequest is request for DeviceCompliancePolicyDeviceStateSummary
type DeviceCompliancePolicyDeviceStateSummaryRequest struct{ BaseRequest }

// Get performs GET request for DeviceCompliancePolicyDeviceStateSummary
func (r *DeviceCompliancePolicyDeviceStateSummaryRequest) Get(ctx context.Context) (resObj *DeviceCompliancePolicyDeviceStateSummary, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceCompliancePolicyDeviceStateSummary
func (r *DeviceCompliancePolicyDeviceStateSummaryRequest) Update(ctx context.Context, reqObj *DeviceCompliancePolicyDeviceStateSummary) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceCompliancePolicyDeviceStateSummary
func (r *DeviceCompliancePolicyDeviceStateSummaryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceCompliancePolicyDeviceStateSummary
func (r *DeviceCompliancePolicyDeviceStateSummaryRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceCompliancePolicyDeviceStateSummary
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceCompliancePolicyDeviceStateSummary
func (r *DeviceCompliancePolicyDeviceStateSummaryRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceCompliancePolicyDeviceStateSummary) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceCompliancePolicyDeviceStateSummary
func (r *DeviceCompliancePolicyDeviceStateSummaryRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceCompliancePolicySettingStateSummaryRequestBuilder is request builder for DeviceCompliancePolicySettingStateSummary
type DeviceCompliancePolicySettingStateSummaryRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceCompliancePolicySettingStateSummaryRequest
func (b *DeviceCompliancePolicySettingStateSummaryRequestBuilder) Request() *DeviceCompliancePolicySettingStateSummaryRequest {
	return &DeviceCompliancePolicySettingStateSummaryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceCompliancePolicySettingStateSummaryRequest is request for DeviceCompliancePolicySettingStateSummary
type DeviceCompliancePolicySettingStateSummaryRequest struct{ BaseRequest }

// Get performs GET request for DeviceCompliancePolicySettingStateSummary
func (r *DeviceCompliancePolicySettingStateSummaryRequest) Get(ctx context.Context) (resObj *DeviceCompliancePolicySettingStateSummary, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceCompliancePolicySettingStateSummary
func (r *DeviceCompliancePolicySettingStateSummaryRequest) Update(ctx context.Context, reqObj *DeviceCompliancePolicySettingStateSummary) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceCompliancePolicySettingStateSummary
func (r *DeviceCompliancePolicySettingStateSummaryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceCompliancePolicySettingStateSummary
func (r *DeviceCompliancePolicySettingStateSummaryRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceCompliancePolicySettingStateSummary
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceCompliancePolicySettingStateSummary
func (r *DeviceCompliancePolicySettingStateSummaryRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceCompliancePolicySettingStateSummary) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceCompliancePolicySettingStateSummary
func (r *DeviceCompliancePolicySettingStateSummaryRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceCompliancePolicyStateRequestBuilder is request builder for DeviceCompliancePolicyState
type DeviceCompliancePolicyStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceCompliancePolicyStateRequest
func (b *DeviceCompliancePolicyStateRequestBuilder) Request() *DeviceCompliancePolicyStateRequest {
	return &DeviceCompliancePolicyStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceCompliancePolicyStateRequest is request for DeviceCompliancePolicyState
type DeviceCompliancePolicyStateRequest struct{ BaseRequest }

// Get performs GET request for DeviceCompliancePolicyState
func (r *DeviceCompliancePolicyStateRequest) Get(ctx context.Context) (resObj *DeviceCompliancePolicyState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceCompliancePolicyState
func (r *DeviceCompliancePolicyStateRequest) Update(ctx context.Context, reqObj *DeviceCompliancePolicyState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceCompliancePolicyState
func (r *DeviceCompliancePolicyStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceCompliancePolicyState
func (r *DeviceCompliancePolicyStateRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceCompliancePolicyState
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceCompliancePolicyState
func (r *DeviceCompliancePolicyStateRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceCompliancePolicyState) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceCompliancePolicyState
func (r *DeviceCompliancePolicyStateRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceScheduledActionForRuleRequestBuilder is request builder for DeviceComplianceScheduledActionForRule
type DeviceComplianceScheduledActionForRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceScheduledActionForRuleRequest
func (b *DeviceComplianceScheduledActionForRuleRequestBuilder) Request() *DeviceComplianceScheduledActionForRuleRequest {
	return &DeviceComplianceScheduledActionForRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceScheduledActionForRuleRequest is request for DeviceComplianceScheduledActionForRule
type DeviceComplianceScheduledActionForRuleRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceScheduledActionForRule
func (r *DeviceComplianceScheduledActionForRuleRequest) Get(ctx context.Context) (resObj *DeviceComplianceScheduledActionForRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceScheduledActionForRule
func (r *DeviceComplianceScheduledActionForRuleRequest) Update(ctx context.Context, reqObj *DeviceComplianceScheduledActionForRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceScheduledActionForRule
func (r *DeviceComplianceScheduledActionForRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceScheduledActionForRule
func (r *DeviceComplianceScheduledActionForRuleRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceScheduledActionForRule
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceScheduledActionForRule
func (r *DeviceComplianceScheduledActionForRuleRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceScheduledActionForRule) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceScheduledActionForRule
func (r *DeviceComplianceScheduledActionForRuleRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceSettingStateRequestBuilder is request builder for DeviceComplianceSettingState
type DeviceComplianceSettingStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceSettingStateRequest
func (b *DeviceComplianceSettingStateRequestBuilder) Request() *DeviceComplianceSettingStateRequest {
	return &DeviceComplianceSettingStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceSettingStateRequest is request for DeviceComplianceSettingState
type DeviceComplianceSettingStateRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceSettingState
func (r *DeviceComplianceSettingStateRequest) Get(ctx context.Context) (resObj *DeviceComplianceSettingState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceSettingState
func (r *DeviceComplianceSettingStateRequest) Update(ctx context.Context, reqObj *DeviceComplianceSettingState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceSettingState
func (r *DeviceComplianceSettingStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceSettingState
func (r *DeviceComplianceSettingStateRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceSettingState
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceSettingState
func (r *DeviceComplianceSettingStateRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceSettingState) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceSettingState
func (r *DeviceComplianceSettingStateRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceUserOverviewRequestBuilder is request builder for DeviceComplianceUserOverview
type DeviceComplianceUserOverviewRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceUserOverviewRequest
func (b *DeviceComplianceUserOverviewRequestBuilder) Request() *DeviceComplianceUserOverviewRequest {
	return &DeviceComplianceUserOverviewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceUserOverviewRequest is request for DeviceComplianceUserOverview
type DeviceComplianceUserOverviewRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceUserOverview
func (r *DeviceComplianceUserOverviewRequest) Get(ctx context.Context) (resObj *DeviceComplianceUserOverview, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceUserOverview
func (r *DeviceComplianceUserOverviewRequest) Update(ctx context.Context, reqObj *DeviceComplianceUserOverview) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceUserOverview
func (r *DeviceComplianceUserOverviewRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceUserOverview
func (r *DeviceComplianceUserOverviewRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceUserOverview
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceUserOverview
func (r *DeviceComplianceUserOverviewRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceUserOverview) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceUserOverview
func (r *DeviceComplianceUserOverviewRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceComplianceUserStatusRequestBuilder is request builder for DeviceComplianceUserStatus
type DeviceComplianceUserStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceComplianceUserStatusRequest
func (b *DeviceComplianceUserStatusRequestBuilder) Request() *DeviceComplianceUserStatusRequest {
	return &DeviceComplianceUserStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceComplianceUserStatusRequest is request for DeviceComplianceUserStatus
type DeviceComplianceUserStatusRequest struct{ BaseRequest }

// Get performs GET request for DeviceComplianceUserStatus
func (r *DeviceComplianceUserStatusRequest) Get(ctx context.Context) (resObj *DeviceComplianceUserStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceComplianceUserStatus
func (r *DeviceComplianceUserStatusRequest) Update(ctx context.Context, reqObj *DeviceComplianceUserStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceComplianceUserStatus
func (r *DeviceComplianceUserStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceComplianceUserStatus
func (r *DeviceComplianceUserStatusRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceComplianceUserStatus
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceComplianceUserStatus
func (r *DeviceComplianceUserStatusRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceComplianceUserStatus) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceComplianceUserStatus
func (r *DeviceComplianceUserStatusRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationRequestBuilder is request builder for DeviceConfiguration
type DeviceConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationRequest
func (b *DeviceConfigurationRequestBuilder) Request() *DeviceConfigurationRequest {
	return &DeviceConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationRequest is request for DeviceConfiguration
type DeviceConfigurationRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfiguration
func (r *DeviceConfigurationRequest) Get(ctx context.Context) (resObj *DeviceConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfiguration
func (r *DeviceConfigurationRequest) Update(ctx context.Context, reqObj *DeviceConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfiguration
func (r *DeviceConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfiguration
func (r *DeviceConfigurationRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfiguration
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfiguration
func (r *DeviceConfigurationRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfiguration) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfiguration
func (r *DeviceConfigurationRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationAssignmentRequestBuilder is request builder for DeviceConfigurationAssignment
type DeviceConfigurationAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationAssignmentRequest
func (b *DeviceConfigurationAssignmentRequestBuilder) Request() *DeviceConfigurationAssignmentRequest {
	return &DeviceConfigurationAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationAssignmentRequest is request for DeviceConfigurationAssignment
type DeviceConfigurationAssignmentRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationAssignment
func (r *DeviceConfigurationAssignmentRequest) Get(ctx context.Context) (resObj *DeviceConfigurationAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationAssignment
func (r *DeviceConfigurationAssignmentRequest) Update(ctx context.Context, reqObj *DeviceConfigurationAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationAssignment
func (r *DeviceConfigurationAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationAssignment
func (r *DeviceConfigurationAssignmentRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationAssignment
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationAssignment
func (r *DeviceConfigurationAssignmentRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationAssignment) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationAssignment
func (r *DeviceConfigurationAssignmentRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationDeviceOverviewRequestBuilder is request builder for DeviceConfigurationDeviceOverview
type DeviceConfigurationDeviceOverviewRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationDeviceOverviewRequest
func (b *DeviceConfigurationDeviceOverviewRequestBuilder) Request() *DeviceConfigurationDeviceOverviewRequest {
	return &DeviceConfigurationDeviceOverviewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationDeviceOverviewRequest is request for DeviceConfigurationDeviceOverview
type DeviceConfigurationDeviceOverviewRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationDeviceOverview
func (r *DeviceConfigurationDeviceOverviewRequest) Get(ctx context.Context) (resObj *DeviceConfigurationDeviceOverview, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationDeviceOverview
func (r *DeviceConfigurationDeviceOverviewRequest) Update(ctx context.Context, reqObj *DeviceConfigurationDeviceOverview) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationDeviceOverview
func (r *DeviceConfigurationDeviceOverviewRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationDeviceOverview
func (r *DeviceConfigurationDeviceOverviewRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationDeviceOverview
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationDeviceOverview
func (r *DeviceConfigurationDeviceOverviewRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationDeviceOverview) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationDeviceOverview
func (r *DeviceConfigurationDeviceOverviewRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationDeviceStateSummaryRequestBuilder is request builder for DeviceConfigurationDeviceStateSummary
type DeviceConfigurationDeviceStateSummaryRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationDeviceStateSummaryRequest
func (b *DeviceConfigurationDeviceStateSummaryRequestBuilder) Request() *DeviceConfigurationDeviceStateSummaryRequest {
	return &DeviceConfigurationDeviceStateSummaryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationDeviceStateSummaryRequest is request for DeviceConfigurationDeviceStateSummary
type DeviceConfigurationDeviceStateSummaryRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationDeviceStateSummary
func (r *DeviceConfigurationDeviceStateSummaryRequest) Get(ctx context.Context) (resObj *DeviceConfigurationDeviceStateSummary, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationDeviceStateSummary
func (r *DeviceConfigurationDeviceStateSummaryRequest) Update(ctx context.Context, reqObj *DeviceConfigurationDeviceStateSummary) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationDeviceStateSummary
func (r *DeviceConfigurationDeviceStateSummaryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationDeviceStateSummary
func (r *DeviceConfigurationDeviceStateSummaryRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationDeviceStateSummary
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationDeviceStateSummary
func (r *DeviceConfigurationDeviceStateSummaryRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationDeviceStateSummary) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationDeviceStateSummary
func (r *DeviceConfigurationDeviceStateSummaryRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationDeviceStatusRequestBuilder is request builder for DeviceConfigurationDeviceStatus
type DeviceConfigurationDeviceStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationDeviceStatusRequest
func (b *DeviceConfigurationDeviceStatusRequestBuilder) Request() *DeviceConfigurationDeviceStatusRequest {
	return &DeviceConfigurationDeviceStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationDeviceStatusRequest is request for DeviceConfigurationDeviceStatus
type DeviceConfigurationDeviceStatusRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationDeviceStatus
func (r *DeviceConfigurationDeviceStatusRequest) Get(ctx context.Context) (resObj *DeviceConfigurationDeviceStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationDeviceStatus
func (r *DeviceConfigurationDeviceStatusRequest) Update(ctx context.Context, reqObj *DeviceConfigurationDeviceStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationDeviceStatus
func (r *DeviceConfigurationDeviceStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationDeviceStatus
func (r *DeviceConfigurationDeviceStatusRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationDeviceStatus
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationDeviceStatus
func (r *DeviceConfigurationDeviceStatusRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationDeviceStatus) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationDeviceStatus
func (r *DeviceConfigurationDeviceStatusRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationStateRequestBuilder is request builder for DeviceConfigurationState
type DeviceConfigurationStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationStateRequest
func (b *DeviceConfigurationStateRequestBuilder) Request() *DeviceConfigurationStateRequest {
	return &DeviceConfigurationStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationStateRequest is request for DeviceConfigurationState
type DeviceConfigurationStateRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationState
func (r *DeviceConfigurationStateRequest) Get(ctx context.Context) (resObj *DeviceConfigurationState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationState
func (r *DeviceConfigurationStateRequest) Update(ctx context.Context, reqObj *DeviceConfigurationState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationState
func (r *DeviceConfigurationStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationState
func (r *DeviceConfigurationStateRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationState
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationState
func (r *DeviceConfigurationStateRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationState) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationState
func (r *DeviceConfigurationStateRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationUserOverviewRequestBuilder is request builder for DeviceConfigurationUserOverview
type DeviceConfigurationUserOverviewRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationUserOverviewRequest
func (b *DeviceConfigurationUserOverviewRequestBuilder) Request() *DeviceConfigurationUserOverviewRequest {
	return &DeviceConfigurationUserOverviewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationUserOverviewRequest is request for DeviceConfigurationUserOverview
type DeviceConfigurationUserOverviewRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationUserOverview
func (r *DeviceConfigurationUserOverviewRequest) Get(ctx context.Context) (resObj *DeviceConfigurationUserOverview, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationUserOverview
func (r *DeviceConfigurationUserOverviewRequest) Update(ctx context.Context, reqObj *DeviceConfigurationUserOverview) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationUserOverview
func (r *DeviceConfigurationUserOverviewRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationUserOverview
func (r *DeviceConfigurationUserOverviewRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationUserOverview
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationUserOverview
func (r *DeviceConfigurationUserOverviewRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationUserOverview) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationUserOverview
func (r *DeviceConfigurationUserOverviewRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceConfigurationUserStatusRequestBuilder is request builder for DeviceConfigurationUserStatus
type DeviceConfigurationUserStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceConfigurationUserStatusRequest
func (b *DeviceConfigurationUserStatusRequestBuilder) Request() *DeviceConfigurationUserStatusRequest {
	return &DeviceConfigurationUserStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceConfigurationUserStatusRequest is request for DeviceConfigurationUserStatus
type DeviceConfigurationUserStatusRequest struct{ BaseRequest }

// Get performs GET request for DeviceConfigurationUserStatus
func (r *DeviceConfigurationUserStatusRequest) Get(ctx context.Context) (resObj *DeviceConfigurationUserStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceConfigurationUserStatus
func (r *DeviceConfigurationUserStatusRequest) Update(ctx context.Context, reqObj *DeviceConfigurationUserStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceConfigurationUserStatus
func (r *DeviceConfigurationUserStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceConfigurationUserStatus
func (r *DeviceConfigurationUserStatusRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceConfigurationUserStatus
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceConfigurationUserStatus
func (r *DeviceConfigurationUserStatusRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceConfigurationUserStatus) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceConfigurationUserStatus
func (r *DeviceConfigurationUserStatusRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceEnrollmentConfigurationRequestBuilder is request builder for DeviceEnrollmentConfiguration
type DeviceEnrollmentConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceEnrollmentConfigurationRequest
func (b *DeviceEnrollmentConfigurationRequestBuilder) Request() *DeviceEnrollmentConfigurationRequest {
	return &DeviceEnrollmentConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceEnrollmentConfigurationRequest is request for DeviceEnrollmentConfiguration
type DeviceEnrollmentConfigurationRequest struct{ BaseRequest }

// Get performs GET request for DeviceEnrollmentConfiguration
func (r *DeviceEnrollmentConfigurationRequest) Get(ctx context.Context) (resObj *DeviceEnrollmentConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceEnrollmentConfiguration
func (r *DeviceEnrollmentConfigurationRequest) Update(ctx context.Context, reqObj *DeviceEnrollmentConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceEnrollmentConfiguration
func (r *DeviceEnrollmentConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceEnrollmentConfiguration
func (r *DeviceEnrollmentConfigurationRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceEnrollmentConfiguration
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceEnrollmentConfiguration
func (r *DeviceEnrollmentConfigurationRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceEnrollmentConfiguration) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceEnrollmentConfiguration
func (r *DeviceEnrollmentConfigurationRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceInstallStateRequestBuilder is request builder for DeviceInstallState
type DeviceInstallStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceInstallStateRequest
func (b *DeviceInstallStateRequestBuilder) Request() *DeviceInstallStateRequest {
	return &DeviceInstallStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceInstallStateRequest is request for DeviceInstallState
type DeviceInstallStateRequest struct{ BaseRequest }

// Get performs GET request for DeviceInstallState
func (r *DeviceInstallStateRequest) Get(ctx context.Context) (resObj *DeviceInstallState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceInstallState
func (r *DeviceInstallStateRequest) Update(ctx context.Context, reqObj *DeviceInstallState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceInstallState
func (r *DeviceInstallStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceInstallState
func (r *DeviceInstallStateRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceInstallState
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceInstallState
func (r *DeviceInstallStateRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceInstallState) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceInstallState
func (r *DeviceInstallStateRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceManagementRequestBuilder is request builder for DeviceManagement
type DeviceManagementRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementRequest
func (b *DeviceManagementRequestBuilder) Request() *DeviceManagementRequest {
	return &DeviceManagementRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementRequest is request for DeviceManagement
type DeviceManagementRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagement
func (r *DeviceManagementRequest) Get(ctx context.Context) (resObj *DeviceManagement, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagement
func (r *DeviceManagementRequest) Update(ctx context.Context, reqObj *DeviceManagement) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagement
func (r *DeviceManagementRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceManagement
func (r *DeviceManagementRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceManagement
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceManagement
func (r *DeviceManagementRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceManagement) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceManagement
func (r *DeviceManagementRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceManagementExchangeConnectorRequestBuilder is request builder for DeviceManagementExchangeConnector
type DeviceManagementExchangeConnectorRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementExchangeConnectorRequest
func (b *DeviceManagementExchangeConnectorRequestBuilder) Request() *DeviceManagementExchangeConnectorRequest {
	return &DeviceManagementExchangeConnectorRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementExchangeConnectorRequest is request for DeviceManagementExchangeConnector
type DeviceManagementExchangeConnectorRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagementExchangeConnector
func (r *DeviceManagementExchangeConnectorRequest) Get(ctx context.Context) (resObj *DeviceManagementExchangeConnector, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagementExchangeConnector
func (r *DeviceManagementExchangeConnectorRequest) Update(ctx context.Context, reqObj *DeviceManagementExchangeConnector) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagementExchangeConnector
func (r *DeviceManagementExchangeConnectorRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceManagementExchangeConnector
func (r *DeviceManagementExchangeConnectorRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceManagementExchangeConnector
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceManagementExchangeConnector
func (r *DeviceManagementExchangeConnectorRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceManagementExchangeConnector) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceManagementExchangeConnector
func (r *DeviceManagementExchangeConnectorRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceManagementPartnerRequestBuilder is request builder for DeviceManagementPartner
type DeviceManagementPartnerRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementPartnerRequest
func (b *DeviceManagementPartnerRequestBuilder) Request() *DeviceManagementPartnerRequest {
	return &DeviceManagementPartnerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementPartnerRequest is request for DeviceManagementPartner
type DeviceManagementPartnerRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagementPartner
func (r *DeviceManagementPartnerRequest) Get(ctx context.Context) (resObj *DeviceManagementPartner, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagementPartner
func (r *DeviceManagementPartnerRequest) Update(ctx context.Context, reqObj *DeviceManagementPartner) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagementPartner
func (r *DeviceManagementPartnerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceManagementPartner
func (r *DeviceManagementPartnerRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceManagementPartner
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceManagementPartner
func (r *DeviceManagementPartnerRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceManagementPartner) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceManagementPartner
func (r *DeviceManagementPartnerRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// DeviceManagementTroubleshootingEventRequestBuilder is request builder for DeviceManagementTroubleshootingEvent
type DeviceManagementTroubleshootingEventRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementTroubleshootingEventRequest
func (b *DeviceManagementTroubleshootingEventRequestBuilder) Request() *DeviceManagementTroubleshootingEventRequest {
	return &DeviceManagementTroubleshootingEventRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementTroubleshootingEventRequest is request for DeviceManagementTroubleshootingEvent
type DeviceManagementTroubleshootingEventRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagementTroubleshootingEvent
func (r *DeviceManagementTroubleshootingEventRequest) Get(ctx context.Context) (resObj *DeviceManagementTroubleshootingEvent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagementTroubleshootingEvent
func (r *DeviceManagementTroubleshootingEventRequest) Update(ctx context.Context, reqObj *DeviceManagementTroubleshootingEvent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagementTroubleshootingEvent
func (r *DeviceManagementTroubleshootingEventRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for DeviceManagementTroubleshootingEvent
func (r *DeviceManagementTroubleshootingEventRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj DeviceManagementTroubleshootingEvent
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for DeviceManagementTroubleshootingEvent
func (r *DeviceManagementTroubleshootingEventRequest) BatchUpdate(batch *BatchRequest, reqObj *DeviceManagementTroubleshootingEvent) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for DeviceManagementTroubleshootingEvent
func (r *DeviceManagementTroubleshootingEventRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

//
type DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestBuilder struct{ BaseRequestBuilder }

// SyncMicrosoftStoreForBusinessApps action undocumented
func (b *DeviceAppManagementRequestBuilder) SyncMicrosoftStoreForBusinessApps(reqObj *DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestParameter) *DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestBuilder {
	bb := &DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/syncMicrosoftStoreForBusinessApps"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest struct{ BaseRequest }

//
func (b *DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestBuilder) Request() *DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest {
	return &DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
func (r *DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest) BatchPost(batch *BatchRequest) error {
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, nil)
}

//
type DeviceCompliancePolicyAssignRequestBuilder struct{ BaseRequestBuilder }

// Assign action undocumented
func (b *DeviceCompliancePolicyRequestBuilder) Assign(reqObj *DeviceCompliancePolicyAssignRequestParameter) *DeviceCompliancePolicyAssignRequestBuilder {
	bb := &DeviceCompliancePolicyAssignRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/assign"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceCompliancePolicyAssignRequest struct{ BaseRequest }

//
func (b *DeviceCompliancePolicyAssignRequestBuilder) Request() *DeviceCompliancePolicyAssignRequest {
	return &DeviceCompliancePolicyAssignRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceCompliancePolicyAssignRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicyAssignment
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *DeviceCompliancePolicyAssignRequest) PostN(ctx context.Context, n int) ([]DeviceCompliancePolicyAssignment, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

//
func (r *DeviceCompliancePolicyAssignRequest) Post(ctx context.Context) ([]DeviceCompliancePolicyAssignment, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

//
func (r *DeviceCompliancePolicyAssignRequest) BatchPost(batch *BatchRequest) error {
	var resObj []DeviceCompliancePolicyAssignment
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, resObj)
}

//
type DeviceCompliancePolicyScheduleActionsForRulesRequestBuilder struct{ BaseRequestBuilder }

// ScheduleActionsForRules action undocumented
func (b *DeviceCompliancePolicyRequestBuilder) ScheduleActionsForRules(reqObj *DeviceCompliancePolicyScheduleActionsForRulesRequestParameter) *DeviceCompliancePolicyScheduleActionsForRulesRequestBuilder {
	bb := &DeviceCompliancePolicyScheduleActionsForRulesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/scheduleActionsForRules"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceCompliancePolicyScheduleActionsForRulesRequest struct{ BaseRequest }

//
func (b *DeviceCompliancePolicyScheduleActionsForRulesRequestBuilder) Request() *DeviceCompliancePolicyScheduleActionsForRulesRequest {
	return &DeviceCompliancePolicyScheduleActionsForRulesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceCompliancePolicyScheduleActionsForRulesRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
func (r *DeviceCompliancePolicyScheduleActionsForRulesRequest) BatchPost(batch *BatchRequest) error {
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, nil)
}

//
type DeviceConfigurationAssignRequestBuilder struct{ BaseRequestBuilder }

// Assign action undocumented
func (b *DeviceConfigurationRequestBuilder) Assign(reqObj *DeviceConfigurationAssignRequestParameter) *DeviceConfigurationAssignRequestBuilder {
	bb := &DeviceConfigurationAssignRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/assign"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceConfigurationAssignRequest struct{ BaseRequest }

//
func (b *DeviceConfigurationAssignRequestBuilder) Request() *DeviceConfigurationAssignRequest {
	return &DeviceConfigurationAssignRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceConfigurationAssignRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationAssignment
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *DeviceConfigurationAssignRequest) PostN(ctx context.Context, n int) ([]DeviceConfigurationAssignment, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

//
func (r *DeviceConfigurationAssignRequest) Post(ctx context.Context) ([]DeviceConfigurationAssignment, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

//
func (r *DeviceConfigurationAssignRequest) BatchPost(batch *BatchRequest) error {
	var resObj []DeviceConfigurationAssignment
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, resObj)
}

//
type DeviceEnrollmentConfigurationSetPriorityRequestBuilder struct{ BaseRequestBuilder }

// SetPriority action undocumented
func (b *DeviceEnrollmentConfigurationRequestBuilder) SetPriority(reqObj *DeviceEnrollmentConfigurationSetPriorityRequestParameter) *DeviceEnrollmentConfigurationSetPriorityRequestBuilder {
	bb := &DeviceEnrollmentConfigurationSetPriorityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/setPriority"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceEnrollmentConfigurationSetPriorityRequest struct{ BaseRequest }

//
func (b *DeviceEnrollmentConfigurationSetPriorityRequestBuilder) Request() *DeviceEnrollmentConfigurationSetPriorityRequest {
	return &DeviceEnrollmentConfigurationSetPriorityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceEnrollmentConfigurationSetPriorityRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
func (r *DeviceEnrollmentConfigurationSetPriorityRequest) BatchPost(batch *BatchRequest) error {
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, nil)
}

//
type DeviceEnrollmentConfigurationAssignRequestBuilder struct{ BaseRequestBuilder }

// Assign action undocumented
func (b *DeviceEnrollmentConfigurationRequestBuilder) Assign(reqObj *DeviceEnrollmentConfigurationAssignRequestParameter) *DeviceEnrollmentConfigurationAssignRequestBuilder {
	bb := &DeviceEnrollmentConfigurationAssignRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/assign"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceEnrollmentConfigurationAssignRequest struct{ BaseRequest }

//
func (b *DeviceEnrollmentConfigurationAssignRequestBuilder) Request() *DeviceEnrollmentConfigurationAssignRequest {
	return &DeviceEnrollmentConfigurationAssignRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceEnrollmentConfigurationAssignRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
func (r *DeviceEnrollmentConfigurationAssignRequest) BatchPost(batch *BatchRequest) error {
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, nil)
}

//
type DeviceManagementExchangeConnectorSyncRequestBuilder struct{ BaseRequestBuilder }

// Sync action undocumented
func (b *DeviceManagementExchangeConnectorRequestBuilder) Sync(reqObj *DeviceManagementExchangeConnectorSyncRequestParameter) *DeviceManagementExchangeConnectorSyncRequestBuilder {
	bb := &DeviceManagementExchangeConnectorSyncRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/sync"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DeviceManagementExchangeConnectorSyncRequest struct{ BaseRequest }

//
func (b *DeviceManagementExchangeConnectorSyncRequestBuilder) Request() *DeviceManagementExchangeConnectorSyncRequest {
	return &DeviceManagementExchangeConnectorSyncRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DeviceManagementExchangeConnectorSyncRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
func (r *DeviceManagementExchangeConnectorSyncRequest) BatchPost(batch *BatchRequest) error {
	return batch.Add("POST", strings.TrimPrefix(r.baseURL, defaultBaseURL), r.requestObject, nil)
}
