// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"strings"
)

// ItemActivityRequestBuilder is request builder for ItemActivity
type ItemActivityRequestBuilder struct{ BaseRequestBuilder }

// Request returns ItemActivityRequest
func (b *ItemActivityRequestBuilder) Request() *ItemActivityRequest {
	return &ItemActivityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ItemActivityRequest is request for ItemActivity
type ItemActivityRequest struct{ BaseRequest }

// Get performs GET request for ItemActivity
func (r *ItemActivityRequest) Get(ctx context.Context) (resObj *ItemActivity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ItemActivity
func (r *ItemActivityRequest) Update(ctx context.Context, reqObj *ItemActivity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ItemActivity
func (r *ItemActivityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for ItemActivity
func (r *ItemActivityRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj ItemActivity
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for ItemActivity
func (r *ItemActivityRequest) BatchUpdate(batch *BatchRequest, reqObj *ItemActivity) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for ItemActivity
func (r *ItemActivityRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// ItemActivityStatRequestBuilder is request builder for ItemActivityStat
type ItemActivityStatRequestBuilder struct{ BaseRequestBuilder }

// Request returns ItemActivityStatRequest
func (b *ItemActivityStatRequestBuilder) Request() *ItemActivityStatRequest {
	return &ItemActivityStatRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ItemActivityStatRequest is request for ItemActivityStat
type ItemActivityStatRequest struct{ BaseRequest }

// Get performs GET request for ItemActivityStat
func (r *ItemActivityStatRequest) Get(ctx context.Context) (resObj *ItemActivityStat, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ItemActivityStat
func (r *ItemActivityStatRequest) Update(ctx context.Context, reqObj *ItemActivityStat) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ItemActivityStat
func (r *ItemActivityStatRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for ItemActivityStat
func (r *ItemActivityStatRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj ItemActivityStat
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for ItemActivityStat
func (r *ItemActivityStatRequest) BatchUpdate(batch *BatchRequest, reqObj *ItemActivityStat) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for ItemActivityStat
func (r *ItemActivityStatRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// ItemAnalyticsRequestBuilder is request builder for ItemAnalytics
type ItemAnalyticsRequestBuilder struct{ BaseRequestBuilder }

// Request returns ItemAnalyticsRequest
func (b *ItemAnalyticsRequestBuilder) Request() *ItemAnalyticsRequest {
	return &ItemAnalyticsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ItemAnalyticsRequest is request for ItemAnalytics
type ItemAnalyticsRequest struct{ BaseRequest }

// Get performs GET request for ItemAnalytics
func (r *ItemAnalyticsRequest) Get(ctx context.Context) (resObj *ItemAnalytics, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ItemAnalytics
func (r *ItemAnalyticsRequest) Update(ctx context.Context, reqObj *ItemAnalytics) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ItemAnalytics
func (r *ItemAnalyticsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for ItemAnalytics
func (r *ItemAnalyticsRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj ItemAnalytics
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for ItemAnalytics
func (r *ItemAnalyticsRequest) BatchUpdate(batch *BatchRequest, reqObj *ItemAnalytics) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for ItemAnalytics
func (r *ItemAnalyticsRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// ItemAttachmentRequestBuilder is request builder for ItemAttachment
type ItemAttachmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns ItemAttachmentRequest
func (b *ItemAttachmentRequestBuilder) Request() *ItemAttachmentRequest {
	return &ItemAttachmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ItemAttachmentRequest is request for ItemAttachment
type ItemAttachmentRequest struct{ BaseRequest }

// Get performs GET request for ItemAttachment
func (r *ItemAttachmentRequest) Get(ctx context.Context) (resObj *ItemAttachment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ItemAttachment
func (r *ItemAttachmentRequest) Update(ctx context.Context, reqObj *ItemAttachment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ItemAttachment
func (r *ItemAttachmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for ItemAttachment
func (r *ItemAttachmentRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj ItemAttachment
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for ItemAttachment
func (r *ItemAttachmentRequest) BatchUpdate(batch *BatchRequest, reqObj *ItemAttachment) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for ItemAttachment
func (r *ItemAttachmentRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}
