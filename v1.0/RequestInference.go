// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"strings"
)

// InferenceClassificationRequestBuilder is request builder for InferenceClassification
type InferenceClassificationRequestBuilder struct{ BaseRequestBuilder }

// Request returns InferenceClassificationRequest
func (b *InferenceClassificationRequestBuilder) Request() *InferenceClassificationRequest {
	return &InferenceClassificationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// InferenceClassificationRequest is request for InferenceClassification
type InferenceClassificationRequest struct{ BaseRequest }

// Get performs GET request for InferenceClassification
func (r *InferenceClassificationRequest) Get(ctx context.Context) (resObj *InferenceClassification, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for InferenceClassification
func (r *InferenceClassificationRequest) Update(ctx context.Context, reqObj *InferenceClassification) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for InferenceClassification
func (r *InferenceClassificationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for InferenceClassification
func (r *InferenceClassificationRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj InferenceClassification
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for InferenceClassification
func (r *InferenceClassificationRequest) BatchUpdate(batch *BatchRequest, reqObj *InferenceClassification) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for InferenceClassification
func (r *InferenceClassificationRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}

// InferenceClassificationOverrideRequestBuilder is request builder for InferenceClassificationOverride
type InferenceClassificationOverrideRequestBuilder struct{ BaseRequestBuilder }

// Request returns InferenceClassificationOverrideRequest
func (b *InferenceClassificationOverrideRequestBuilder) Request() *InferenceClassificationOverrideRequest {
	return &InferenceClassificationOverrideRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// InferenceClassificationOverrideRequest is request for InferenceClassificationOverride
type InferenceClassificationOverrideRequest struct{ BaseRequest }

// Get performs GET request for InferenceClassificationOverride
func (r *InferenceClassificationOverrideRequest) Get(ctx context.Context) (resObj *InferenceClassificationOverride, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for InferenceClassificationOverride
func (r *InferenceClassificationOverrideRequest) Update(ctx context.Context, reqObj *InferenceClassificationOverride) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for InferenceClassificationOverride
func (r *InferenceClassificationOverrideRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BatchGet adds Get operation to Batch for InferenceClassificationOverride
func (r *InferenceClassificationOverrideRequest) BatchGet(batch *BatchRequest) error {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	var resObj InferenceClassificationOverride
	return batch.Add("GET", strings.TrimPrefix(r.baseURL+query, defaultBaseURL), nil, resObj)
}

// BatchUpdate adds Update operation to Batch for InferenceClassificationOverride
func (r *InferenceClassificationOverrideRequest) BatchUpdate(batch *BatchRequest, reqObj *InferenceClassificationOverride) error {
	return batch.Add("PATCH", strings.TrimPrefix(r.baseURL, defaultBaseURL), reqObj, nil)
}

// BatchDelete adds Delete operation to Batch for InferenceClassificationOverride
func (r *InferenceClassificationOverrideRequest) BatchDelete(batch *BatchRequest) error {
	return batch.Add("DELETE", strings.TrimPrefix(r.baseURL, defaultBaseURL), nil, nil)
}
